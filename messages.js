// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var Archive = exports.Archive = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineArchive()

function defineArchive () {
  var Index = Archive.Index = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  defineIndex()

  function defineIndex () {
    var Entry = Index.Entry = {
      buffer: true,
      encodingLength: null,
      encode: null,
      decode: null
    }

    defineEntry()

    function defineEntry () {
      var enc = [
        encodings.varint,
        encodings.string
      ]

      Entry.encodingLength = encodingLength
      Entry.encode = encode
      Entry.decode = decode

      function encodingLength (obj) {
        var length = 0
        if (defined(obj.id)) {
          var len = enc[0].encodingLength(obj.id)
          length += 1 + len
        }
        if (defined(obj.filename)) {
          var len = enc[1].encodingLength(obj.filename)
          length += 1 + len
        }
        return length
      }

      function encode (obj, buf, offset) {
        if (!offset) offset = 0
        if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
        var oldOffset = offset
        if (defined(obj.id)) {
          buf[offset++] = 8
          enc[0].encode(obj.id, buf, offset)
          offset += enc[0].encode.bytes
        }
        if (defined(obj.filename)) {
          buf[offset++] = 18
          enc[1].encode(obj.filename, buf, offset)
          offset += enc[1].encode.bytes
        }
        encode.bytes = offset - oldOffset
        return buf
      }

      function decode (buf, offset, end) {
        if (!offset) offset = 0
        if (!end) end = buf.length
        if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
        var oldOffset = offset
        var obj = {
          id: 0,
          filename: ""
        }
        while (true) {
          if (end <= offset) {
            decode.bytes = offset - oldOffset
            return obj
          }
          var prefix = varint.decode(buf, offset)
          offset += varint.decode.bytes
          var tag = prefix >> 3
          switch (tag) {
            case 1:
            obj.id = enc[0].decode(buf, offset)
            offset += enc[0].decode.bytes
            break
            case 2:
            obj.filename = enc[1].decode(buf, offset)
            offset += enc[1].decode.bytes
            break
            default:
            offset = skip(prefix & 7, buf, offset)
          }
        }
      }
    }

    var enc = [
      encodings.varint,
      Entry
    ]

    Index.encodingLength = encodingLength
    Index.encode = encode
    Index.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.size)) {
        var len = enc[0].encodingLength(obj.size)
        length += 1 + len
      }
      if (defined(obj.entries)) {
        for (var i = 0; i < obj.entries.length; i++) {
          if (!defined(obj.entries[i])) continue
          var len = enc[1].encodingLength(obj.entries[i])
          length += varint.encodingLength(len)
          length += 1 + len
        }
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.size)) {
        buf[offset++] = 8
        enc[0].encode(obj.size, buf, offset)
        offset += enc[0].encode.bytes
      }
      if (defined(obj.entries)) {
        for (var i = 0; i < obj.entries.length; i++) {
          if (!defined(obj.entries[i])) continue
          buf[offset++] = 18
          varint.encode(enc[1].encodingLength(obj.entries[i]), buf, offset)
          offset += varint.encode.bytes
          enc[1].encode(obj.entries[i], buf, offset)
          offset += enc[1].encode.bytes
        }
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        size: 0,
        entries: []
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.size = enc[0].decode(buf, offset)
          offset += enc[0].decode.bytes
          break
          case 2:
          var len = varint.decode(buf, offset)
          offset += varint.decode.bytes
          obj.entries.push(enc[1].decode(buf, offset, offset + len))
          offset += enc[1].decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  var enc = [
    Index
  ]

  Archive.encodingLength = encodingLength
  Archive.encode = encode
  Archive.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.index)) {
      var len = enc[0].encodingLength(obj.index)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.index)) {
      buf[offset++] = 10
      varint.encode(enc[0].encodingLength(obj.index), buf, offset)
      offset += varint.encode.bytes
      enc[0].encode(obj.index, buf, offset)
      offset += enc[0].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      index: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.index = enc[0].decode(buf, offset, offset + len)
        offset += enc[0].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
