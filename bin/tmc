#!/usr/bin/env node

const { compile, archive, unpack, load } = require('../')
const { version } = require('../package.json')
const prettyBytes = require('pretty-bytes')
const minimist = require('minimist')
const mkdirp = require('mkdirp')
const Batch = require('batch')
const debug = require('debug')('tiny-module-compiler')
const path = require('path')
const fs = require('fs')
const os = require('os')

const argv = minimist(process.argv.slice(2), {
  boolean: [
    'archive',
    'compile',
    'copy-assets',
    'debug',
    'help',
    'load',
    'optimize',
    'source-map',
    'unpack',
    'verbose',
    'version',
  ],

  string: [
    'output'
  ],

  array: [
    'external'
  ],

  number: [
    'concurrency',
    'jobs'
  ],

  alias: {
    a: 'archive',
    c: 'compile',
    C: 'copy-assets',
    D: 'debug',
    e: 'external',
    h: 'help',
    j: 'jobs',
    l: 'load',
    M: 'source-map',
    O: 'optimize',
    o: 'output',
    u: 'unpack',
    v: 'verbose',
    V: 'version',
    x: 'external',
  }
})

const usage = `usage: tmc [-hV] [-acu] [-vCDMO] [options] ...input
where options can be:

  -a, --archive             If present, will archive input into "tinybox" format
  -c, --compile             If present, will compile input into header prefixed v8 cached data
    , --concurrency <jobs>  An alias for '--jobs'
  -C, --copy-assets         If present, will copy assets to directory of output
  -D, --debug               If present, will enable debug output (DEBUG=tiny-module-compiler)
  -e, --external <module>   Specifies an external dependency that will be linked at runtime
  -h, --help                If present, will print this message
  -l, --load                If present, will load inputs
  -j, --jobs <jobs>         Specifies the number of concurrent jobs for batch tasks (--load, --archive, --copy-assets)
  -M, --source-map          If present, a source map will be generated
  -o, --output <path>       If present, will change the output path. Assumes directory if multiple inputs given
  -O, --optimize            If present, will optimize output by minifying JavaScript source prior to compilation
  -u, --unpack              If present, will treat input as an archive and will unpack files to path specified by '--output'
  -v, --verbose             If present, will emit verbose output to stdout/stderr
  -V, --version             If present, will print the version number
  -x                        An alias for '--external'
`.trim()

if (argv.version) {
  console.log(version)
  process.exit(0)
}

if (argv.debug) {
  require('debug').enable(`tiny-module-compiler*,${process.env.DEBUG || ''}`)
}

if (argv.help || 0 === argv._.length) {
  if (argv.help) {
    console.log(usage)
    process.exit(0)
  } else {
    console.error(usage)
    process.exit(1)
  }
}

const opts = {
  map: argv['source-map'],
  debug: argv.debug,
  cache: true,
  quiet: argv.verbose ? false : true,
  minify: Boolean(argv.optimize || argv.minify),
  output: argv.output || null,
  externals: [ ].concat(argv.external).filter(Boolean),
  concurrency: Number(argv.jobs || argv.concurrency || os.cpus().length)
}

debug('options: map=%s debug=%s cache=%s quiet=%s minify=%s concurrency=%s',
  opts.map, opts.debug, opts.cache, opts.quiet, opts.minify, opts.concurrency)

if (opts.externals.length) {
  debug('externals: %s', opts.externals.join(', '))
}

if (opts.output) {
  debug('output: %s', opts.output)
}

if (argv.compile || (!argv.archive && !argv.unpack && !argv.load)) { // default
  if (argv.output && 'string' === typeof argv.output) {
    opts.output = path.resolve(argv.output)
    if (argv._.length > 1) {
      mkdirp.sync(path.dirname(opts.output))
    }
  }

  compile(argv._, opts, (err, objects, assets) => {
    if (err) {
      console.error('error:', err.message)
      debug(err)
      return process.exit(1)
    }

    if (argv['copy-assets']) {
      const writes = new Batch().concurrency(opts.concurrency)
      for (let [ filename, asset ] of assets) {
        filename = path.resolve(filename)
        writes.push((next) => {
          const opts = { mode: asset.permissions }
          console.warn(' warn: writing asset %s (%s)',
            filename.replace(process.cwd(), '.'),
            prettyBytes(asset.source.length),
            opts.mode.toString(8))

          fs.writeFile(filename, asset.source, opts, next)
        })
      }

      writes.end((err) => {
        if (err) {
          console.error('error:', err.message)
          debug(err)
          return process.exit(1)
        }
      })
    }
  })
} else if (argv.archive) {
  const target = argv._[0]
  const inputs = argv._.slice(1)
  archive(target, inputs, opts, (err) => {
    if (err) {
      console.error('error:', err.message)
      debug(err)
      return process.exit(1)
    }
  })
} else if (argv.unpack) {
  unpack(argv._[0], opts, (err) => {
    if (err) {
      console.error('error:', err.message)
      debug(err)
      return process.exit(1)
    }
  })
} else if (argv.load) {
  const loads = new Batch().concurrency(opts.concurrency)

  for (const input of argv._) {
    loads.push((next) => load(input, next))
  }

  loads.end((err) => {
    if (err) {
      console.error('error:', err.message)
      debug(err)
      return process.exit(1)
    }
  })
}
